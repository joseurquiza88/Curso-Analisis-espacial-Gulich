sort_field = "ID")
less_exposure_route_line<- points_to_line(data = less_exposure_route,
long = "long",
lat = "lat",
id_field = NULL,
sort_field = "ID")
##CRS
proj4string(less_polluted_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(more_polluted_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(shorter_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(faster_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(more_exposure_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(less_exposure_route_line) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# ------- output: map
#  --- Title map
if (output == "plot"){
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 18px;
}
"))
#  --- Title
title <- tags$div(tag.map.title,
HTML(paste("<center><b>travel alternative with mode: </b></center>",mode)))
#  --- Contenido del plot
content_more_cont <- paste(sep = "<br/>",
paste0("<center><b>More polluted route: </b></center>"),
paste0("<b>Duration: </b>", more_polluted_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", more_polluted_route$lengthInMeters," km"),
paste0("<b>Concentrations PM: </b>", more_polluted_route$dailyPM," µg m-3"),
paste0("<b>PM Exposure: </b>", more_polluted_route$exposure," µg m-3/h"))
content_less_cont <- paste(sep = "<br/>",
paste0("<center><b>Less polluted route: </b></center>"),
paste0("<b>Duration: </b>", less_polluted_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", less_polluted_route$lengthInMeters," km"),
paste0("<b>PM Concentrations: </b>", less_polluted_route$dailyPM," µg m-3"),
paste0("<b>PM exposure: </b>", less_polluted_route$exposure," µg m-3/h"))
content_short <- paste(sep = "<br/>",
paste0("<center><b>Shorter route: </b></center>"),
paste0("<b>Duration: </b>",shorter_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", shorter_route$lengthInMeters," km"),
paste0("<b>PM Concentrations: </b>", shorter_route$dailyPM," µg m-3"),
paste0("<b>PM exposure: </b>", shorter_route$exposure," µg m-3/h"))
content_fast <- paste(sep = "<br/>",
paste0("<center><b>Faster route: </b></center>"),
paste0("<b>Duration: </b>", faster_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", faster_route$lengthInMeters," km"),
paste0("<b>PM Concentrations: </b>", faster_route$dailyPM," µg m-3"),
paste0("<b>PM exposure: </b>", faster_route$exposure," µg m-3/h"))
content_less_exp<- paste(sep = "<br/>",
paste0("<center><b>Ruta Less exposure: </b></center>"),
paste0("<b>Duration: </b>", less_exposure_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", less_exposure_route$lengthInMeters," km"),
paste0("<b>PM Concentrations: </b>", less_exposure_route$dailyPM," ?g m-3"),
paste0("<b>PM exposure: </b>", less_exposure_route$exposure," ?g m-3/h"))
content_more_exp <- paste(sep = "<br/>",
paste0("<center><b>More exposure route: </b></center>"),
paste0("<b>Duration: </b>", more_exposure_route$travelTimeInSeconds," min"),
paste0("<b>Distance: </b>", more_exposure_route$lengthInMeters," km"),
paste0("<b>PM Concentrations: </b>", more_exposure_route$dailyPM," ?g m-3"),
paste0("<b>PM exposure: </b>", more_exposure_route$exposure," ?g m-3/h"))
#  --- Grid category
grid$category = case_when(grid$dailyPM<=12.1 ~ 'Good',
grid$dailyPM>12.1 & grid$dailyPM <= 35.4  ~ 'Moderate',
grid$dailyPM >35.4 & grid$dailyPM <= 55.4  ~ 'Unhealthy for sensitive groups',
grid$dailyPM > 55.4 & grid$dailyPM <= 150.4  ~ 'Unhealthy',
grid$dailyPM > 150.4 & grid$dailyPM <= 250.4  ~ 'Very Unhealthy',
grid$dailyPM > 250.4 ~ 'Hazardous' )
#  --- Colorgrid
palette_grid <- c("#abdda4","#f8fd66","#fdde61","#d74a4c","#b687ba","#590e63")
palfac <- colorFactor(palette_grid, domain = grid$category)
# ---  Plot
map <- leaflet() %>%
addTiles() %>%
addAwesomeMarkers(
lat = as.numeric(strsplit(origin, ",")[[1]][1]),
lng = as.numeric(strsplit(origin, ",")[[1]][2]),
label = "origin") %>%
addAwesomeMarkers(
lat = as.numeric(strsplit(dest, ",")[[1]][1]),
lng = as.numeric(strsplit(dest, ",")[[1]][2]),
label = "destination") %>%
addPolylines(data = faster_route_line,weight = 5,stroke = TRUE, color ="#FF0000FF",label = "Faster route",popup=content_fast,group="Faster route") %>%
addPolylines(data = shorter_route_line,weight = 5,stroke = TRUE,color ="#ae017e",label = "Shorter route",popup=content_short,group="Shorter route") %>%
addPolylines(data = more_polluted_route_line,weight = 5,stroke = TRUE, color ="#00FF66FF",label = "More polluted route",popup=content_more_cont,group="More polluted route")%>%
addPolylines(data = less_polluted_route_line,weight = 5, color ="#08306b",label = "Less polluted route",popup=content_less_cont,group="Less polluted route")%>%
addPolylines(data = less_exposure_route_line,weight = 5, color ="#016c59",label = "Less exposure route",popup=content_less_exp,group="Less exposure route")%>%
addPolylines(data = more_exposure_route_line,weight = 5, color ="#cc4c02",label = "More exposure route",popup=content_more_exp,group="More exposure route")%>%
addPolygons(data = grid,color = "#636363" ,
group = "Concentrations",
weight = 2,
smoothFactor = 0.1,
opacity = 0.1,
fillOpacity = 0.5,
fillColor = ~palfac(grid$category)
)%>%
addTiles() %>%
addControl(title, position = "topleft", className="map-title")%>%
addLegend(data = grid,position = "bottomleft", pal = palfac, values = ~grid$category,
title = "PM2.5 Concentrations (μg m-3)")%>%
# Layers control
addLayersControl(
overlayGroups = c("Concentrations","Less polluted route", "More polluted route", "Shorter route","Faster route", "Less exposure route","More exposure route"))#,
alternative_map <- map
return(alternative_map)
}
#################################################################################
# ------- output POLYLINE
if (output == "polyline"){
df_output <- rbind(faster_route,shorter_route,more_polluted_route,less_polluted_route)
polyline_output<- points_to_line(data = df_output,
long = "long",
lat = "lat",
id_field = "type",
sort_field = "ID")
id_df_output <- data.frame()
df_output%>%
group_by(type) %>%
group_split() -> group_dat_output
for (p in 1:length(polyline_output@lines)){
id <- polyline_output@lines[[p]]@ID
origin <- origin
destination <- dest
departureTime <- group_dat_output[[p]][["departureTime"]][1]
arrivalTime<- group_dat_output[[p]][["arrivalTime"]][1]
lengthInMeters<- group_dat_output[[p]][["lengthInMeters"]][1]
trafficLengthInMeters <- group_dat_output[[p]][["trafficLengthInMeters"]][1]
travelMode <- group_dat_output[[p]][["travelMode"]][1]
trafficDelayInSeconds<-  group_dat_output[[p]][["trafficDelayInSeconds"]][1]
travelTimeInSeconds<- group_dat_output[[p]][["travelTimeInSeconds"]][1]
liveTrafficIncidentsTravelTimeInSeconds<- group_dat_output[[p]][["liveTrafficIncidentsTravelTimeInSeconds"]][1]
historicTrafficTravelTimeInSeconds <- group_dat_output[[p]][["historicTrafficTravelTimeInSeconds"]][1]
noTrafficTravelTimeInSeconds<- group_dat_output[[p]][["noTrafficTravelTimeInSeconds"]][1]
alternative<-group_dat_output[[p]][["alternative"]][1]
type <- group_dat_output[[p]][["type"]][1]
dailyPM<-group_dat_output[[p]][["dailyPM"]][1]
data_frame_output <- data.frame(id , origin,destination ,departureTime,
arrivalTime, lengthInMeters,
trafficLengthInMeters,travelMode,
trafficDelayInSeconds,travelTimeInSeconds ,
liveTrafficIncidentsTravelTimeInSeconds,
historicTrafficTravelTimeInSeconds,
noTrafficTravelTimeInSeconds,
alternative, type, dailyPM)
names (data_frame_output)<- c("id" , "origin","destination" ,"departureTime",
"arrivalTime", "lengthInMeters",
"trafficLengthInMeters","travelMode",
"trafficDelayInSeconds","travelTimeInSeconds",
"liveTrafficIncidentsTravelTimeInSeconds",
"historicTrafficTravelTimeInSeconds",
"noTrafficTravelTimeInSeconds",
"alternative","type","dailyPM")
id_df_output <- rbind(id_df_output,data_frame_output)
}
df2_output<-SpatialLinesDataFrame(polyline_output, id_df_output , match.ID = F)
proj4string(df2_output) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
}
return(df2_output)
}
########## ------ Examples
#Varios ejemplos para el Area Metropolitana de mendoza
origin <-"-32.79679,-68.816" # lat- long
########## ------ Examples
#Varios ejemplos para el Area Metropolitana de mendoza
origin <-"-32.79679,-68.816" # lat- long
dest <- "-32.90212,-68.761" # lat- long
### se obtiene de la pagina de tom-tom https://developer.tomtom.com/how-to-get-tomtom-api-key
key <- "YOdvX5qKwpk9YRl9v0JzqC5qSYNOwbDc"
mode <- "car"
# Este es el directorio donde se encuentran los archivos .shp con los mapas
# de las concentraciones
concentrations_grid="D:/Josefina/paper_git/paper_exposure_model/grid_example"
# Es necesario estar ubicado en el directorio donde se encuentran los archivos
#.shp por un tema de las direcciones relativas/absolutas que se ejecutan en la funcion
setwd(concentrations_grid)
# Usar para las pruebas siempre  el dia 1-08-2019 porque son los shape de ejemplo
# que estan en la carpeta enviada.
hour <- "2019-08-01 15:50:00 -03"
# Usar para las pruebas siempre  el dia 1-08-2019 porque son los shape de ejemplo
# que estan en la carpeta enviada.
hour <- "2019-08-01 15:50:00 -03"
#-- Salida en un plot
request_plot <- alternative_trajectories (origin,dest,mode,concentrations_grid,
key,output="plot",hour)
# ------- Function for transforming points into lines
points_to_line <- function(data, long, lat, id_field = NULL, sort_field = NULL) {
# Convert to SpatialPointsDataFrame
coordinates(data) <- c(long, lat)
# If there is a sort field...
if (!is.null(sort_field)) {
if (!is.null(id_field)) {
data <- data[order(data[[id_field]], data[[sort_field]]), ]
} else {
data <- data[order(data[[sort_field]]), ]
}
}
# If there is only one path...
if (is.null(id_field)) {
lines <- SpatialLines(list(Lines(list(Line(data)), "id")))
return(lines)
# Now, if we have multiple lines...
} else if (!is.null(id_field)) {
# Split into a list by ID field
paths <- sp::split(data, data[[id_field]])
sp_lines <- SpatialLines(list(Lines(list(Line(paths[[1]])), "line1")))
# I like for loops, what can I say...
for (p in 2:length(paths)) {
id <- paste0("line", as.character(p))
l <- SpatialLines(list(Lines(list(Line(paths[[p]])), id)))
sp_lines <- spRbind(sp_lines, l)
}
return(sp_lines)
}
}
# ------- Function to convert hours to minutes
function_hours <- function(minutes){
minutes <- round(minutes)
hs_tot <- (minutes/60)
integer <- floor(hs_tot)
decimal <- hs_tot-integer
mins <- round((decimal*60/1),1)
if (integer<=9){
integer_2 <- paste("0",integer,sep = "")
}else{
integer_2<- integer
}
if (mins<=9){
mins_2 <- paste("0",mins,sep = "")
}else{
mins_2<- mins
}
output <- (paste (integer_2,mins_2,sep=":"))
return (output)
}
temporary_grid_search <- function(start_hour, end_hour=NULL,dir_grids,time_format){
# --- Function that looks for the grid (.shp) corresponding to the hour of interest entered
hourly_grid <- function(hour, time_format = time_format,dir_grids=dir_grids){
input_hour <- as.POSIXct(strptime(hour, format = time_format))
hour_exposure<- hour(input_hour)
exposure_day <- date(input_hour)
setwd(dir_grids)
file_list <- dir(dir_grids,pattern = ".shp")
table_files <-as.POSIXct(strptime( substr(file_list,1,15), format = "%Y-%m-%d_%H%M"))
searched_date <- which((date(table_files)) == exposure_day)
table_files <- table_files[searched_date]
searched_hour <- which((hour(table_files))== hour_exposure)
file <- table_files[searched_hour]
name_file<- paste(substr(file,1,10),"_",substr(file,12,13),substr(file,15,16),".shp",sep = "")
return(name_file)
}
trajectory_grid_rbind <- data.frame()
only_start_hour <- hour(as.POSIXct(strptime(start_hour, format = time_format)))
only_end_hour <- hour(as.POSIXct(strptime(end_hour, format = time_format)))
#  ---
if (is.null(end_hour)){
df_start_grids <- st_read(hourly_grid(start_hour, time_format = time_format,dir_grids),quiet = TRUE)
df_start_grid<-st_transform(df_start_grids,crs = 4326)
}
#  --- When there is only one grid
else if (only_start_hour == only_end_hour ){
trajectory_grid <- st_read(hourly_grid(start_hour, time_format = time_format,dir_grids),quiet = TRUE)
salida<-st_transform(trajectory_grid,crs = 4326)
}else{
# --- When there are several grids we do an average per pixel
for(j in only_start_hour:only_end_hour){
if (j < 10){
j_hour <- paste("0",j,sep = "")
}else{
j_hour <- j
}
day <- paste(substr(start_hour,1,10),paste(j_hour,":00:00",sep = ""), "-03",sep = " ")
trajectory_grid <- st_read(hourly_grid(day, time_format = "%Y-%m-%d %H:%M:%S",dir_grids),quiet = TRUE)
trajectory_grid$hour <- day
trajectory_grid_rbind <- rbind(trajectory_grid_rbind,trajectory_grid)
}
## ------------ Group by the ID of the grid and make the mean of each pixel
trajectory_grid_rbind %>%
group_by(GRI1_ID) %>%
group_split() -> data_grilla
df_grilla <- data.frame()
for (p in 1:length(data_grilla)){
GRI1_ID <- data_grilla[[p]][["GRI1_ID"]][1]
dailyPM<- mean(data_grilla[[p]][["value"]],na.rm = T)
geometry <- data_grilla[[p]][["geometry"]][1]
len <- length(data_grilla[[p]][["geometry"]])
df <- data.frame(GRI1_ID,dailyPM,geometry,len)
names(df) <- c("GRI1_ID","value","geometry","len")
df_grilla <- rbind(df_grilla ,df)
names(df_grilla) <- c("GRI1_ID","value","geometry","len")
}
st_write(df_grilla,"./temp/temp_grid.shp",delete_layer = TRUE,quiet = TRUE)
trajectory_grid<- st_read("./temp/temp_grid.shp",quiet = TRUE)
salida<-st_transform(trajectory_grid,crs = 4326)
}
if(is.null(end_hour)){
return(df_start_grid)
}else{
return(salida)
}
}
#-- Salida en un plot
request_plot <- alternative_trajectories (origin,dest,mode,concentrations_grid,
key,output="plot",hour)
library(dplyr)
library(paletteer)
library(leaflet)
library(htmltools)
library(sf)
library(sp)
library(raster)
library(lubridate)
library(RColorBrewer)
library(httr)
library(jsonlite)
#library(terra)
#library(stars)
library(rgdal) # deja de funcionar
#library(maptools) # dejade funcionar
#-- Salida en un plot
request_plot <- alternative_trajectories (origin,dest,mode,concentrations_grid,
key,output="plot",hour)
library(gstat)
library(spdep)
library(plotly)
library(sf)
library(mapview)
# Carga de base de datos ####
datos <- st_read("soja_depurado.gpkg")
datos <-cbind(datos,st_coordinates(datos))
px <- ggplot(datos, aes(X, REND)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
py <- ggplot(datos, aes(Y, REND)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
gridExtra::grid.arrange(px, py, ncol = 2)
# Ajuste de semivariograma experimetal, sin tendencia ####
#con el ~1 le decimos que no hay tendecia
#que el proceso es estacionario
#si pensamos que hay tendencia con x ponemos ~x o tendencia con y ~y
semi_exp <- variogram(REND ~ 1, datos)
# Ajuste de semivariograma teorico, modelo exponencial ####
mod_exp <- fit.variogram(semi_exp, vgm(0.20, "Exp", 110, 0.025))
# Ajuste de semivariograma teorico, modelo esf?rico ####
#vgm (parcial sill, tipo de modelo teorico, rango y nugger)
mod_esf = fit.variogram(semi_exp, vgm(0.20, "Sph", 110, 0.025))
# Visualizacion conjunta ####
vgLine <-
rbind(cbind(variogramLine(mod_exp, maxdist = max(semi_exp$dist)), id =
"Exponencial"),
cbind(variogramLine(mod_esf, maxdist = max(semi_exp$dist)), id = "Esferico"))
grafico <-  ggplot(semi_exp, aes(x = dist, y = gamma, color = id)) +
geom_line(data = vgLine) +
geom_point() +
labs(title = "Semivariograma experimental y teorico ajustado")  +
xlab("Distancia") +
ylab("Semivarianza")  +
scale_color_discrete(name = "Modelo",
labels = c("Esferico", "Exponencial", "Experimental"))
grafico
grafico
# Suma de cuadrado del error de modelos ajustados ####
# VALOR MAS BAJO, LA BONDAD DE AJUSTE ES MEJOR
attr(mod_exp, 'SSErr')
attr(mod_esf, 'SSErr')# El esferico es mejor
vgm()
show.vgms()
# Practica datos MO ####
datos_MO <- read.table("MO_Córdoba.txt", header = T)
head(datos_MO)
# lo transformamos a objeto espacial
datos_MO <- st_as_sf(datos_MO, coords = c("x", "y"),crs=22174)
mapview(datos_MO)
# lo transformamos a objeto espacial
#crs es posgar
datos_MO <- st_as_sf(datos_MO, coords = c("x", "y"),crs=22174)
mapview(datos_MO)
datos_MO
# Incorporación de coordenadas x e y dentro del data.frame
datos_MO <-cbind(st_coordinates(datos_MO),datos_MO)
head(datos_MO)
### Evaluacion de tendencia con coordenadas
px_mo <- ggplot(datos_MO, aes(X, MO)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
py_mo <- ggplot(datos_MO, aes(Y, MO)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
gridExtra::grid.arrange(px_mo, py_mo, ncol = 2)
summary(lm(MO ~ X + Y,datos_MO))
# Ajuste de semivariograma experimetal, sin contemplar tendencia ####
semi_exp_MO<- variogram(MO ~ 1, datos_MO)
# Ajuste de semivariograma teorico ####
#En comparacion al ejemplo anterior, no le ponemos
#valores iniciales como el sill, nuget y rango
# solo le decims a que modelo debe ajustar y calcula
# suma de cuadrados del error
modelo_teorico_MO<-
fit.variogram(semi_exp_MO, vgm(c("Exp","Sph")))
modelo_teorico_MO
plot(semi_exp_MO, modelo_teorico_MO)
# Ajuste de semivariograma experimetal, contemplando tendencia ####
# vamos a considerar la tendencia en y con el ~
semi_exp_MO_t<- variogram(MO ~ Y, datos_MO)
plot(semi_exp_MO_t)
semi_exp_MO_t
# Ajuste de semivariograma teorico ####
modelo_teorico_MO_t <-
fit.variogram(semi_exp_MO_t, vgm(c("Exp","Sph")))
modelo_teorico_MO_t
plot(semi_exp_MO_t, modelo_teorico_MO_t)
# Carga de base de datos PP marzo15, asignacion de sitstema de coordenadas ####
datos_PP <- read.table("ppMarzo.txt", header = TRUE)
#########################################################
#####################################################
# Carga de base de datos PP marzo15, asignacion de sitstema de coordenadas ####
datos_PP <- read.table("ppMarzo.txt", header = TRUE)
head(datos_PP)
datos_PP <- st_as_sf(datos_PP, coords = c("x", "y"),crs=22174)
mapview(datos_PP)
# Incorporación de coordenadas x e y dentro del data.frame
datos_PP <-cbind(st_coordinates(datos_PP),datos_PP)
head(datos_PP)
### Evaluacion de tendencia con coordenadas
px_pp <- ggplot(datos_PP, aes(X, PP)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
py_pp <- ggplot(datos_PP, aes(Y, PP)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
gridExtra::grid.arrange(px_pp, py_pp, ncol = 2)
summary(lm(PP ~ X + Y,datos_PP))
# Ajuste de semivariograma experimetal, sin tendencia ####
semi_exp_PP<- variogram(PP ~ 1, datos_PP)
plot(semi_exp_PP)
# vemos que se estabiliza pero despues aumenta nuevamente
# esto es porque hay pocos datos, los pares de datos son reducidas
# pero vemos que hayuna tendencia lineal, que sube y sube no se estabiliza
plot(semi_exp_PP)
# Ajuste de semivariograma teorico, modelo exponencial ####
mod_exp_PP<-
fit.variogram(semi_exp_PP, vgm(c("Exp")))
mod_exp_PP
plot(semi_exp_PP, mod_exp_PP)
# Ajuste de semivariograma teorico, modelo lineal ####
# no es recomndable usar este tipo de modelo linal
mod_Lin_PP <- fit.variogram(semi_exp_PP, vgm( "Lin"))
mod_Lin_PP
plot(semi_exp_PP, mod_Lin_PP)
# Suma de cuadrado del error de modelos ajustados ####
attr(mod_exp_PP, 'SSErr')
attr(mod_Lin_PP, 'SSErr')
# Ajuste de semivariograma teóricos, 3 modelos sin parametros iniciales
# Aca solo le ponemos 3 modelos de forma simultanea para quw eme diga cual es el mejor
modelos_PP <- fit.variogram(semi_exp_PP, vgm(c("Sph", "Exp", "Lin")))
modelos_PP
plot(semi_exp_PP, modelos_PP)
# Suma de cuadrado del error de modelo ajustado sin tendencia
attr(modelos_PP, 'SSErr')
## ---
# Ajuste de semivariograma experimetal, con tendencia
semi_exp_PP_tend <- variogram(PP ~ X, datos_PP)
plot(semi_exp_PP_tend)
semi_exp_PP_tendY <- variogram(PP ~ X + Y, datos_PP)
# vemos que haydiferencias con lo anterior, vemos que hay un tope a diferencia del anterior
# que sube y sue
plot(semi_exp_PP_tend)
modelos_PP_tend
# Ajuste de semivariograma te?ricos, 2 modelos sin parametros iniciales
modelos_PP_tend <- fit.variogram(semi_exp_PP_tend, vgm(c("Exp", "Sph")))
plot(semi_exp_PP_tend , modelos_PP_tend)
# Ajuste de semivariograma te?ricos, 2 modelos sin parametros iniciales
# Objeto con tendencias en x
modelos_PP_tend <- fit.variogram(semi_exp_PP_tend, vgm(c("Exp", "Sph")))
modelos_PP_tend
plot(semi_exp_PP_tend , modelos_PP_tend)
# Suma de cuadrado del error de modelo ajustados con tendencia
attr(modelos_PP_tend, 'SSErr')
# Carga de paquetes ####
library(gstat)
library(sf)
library(mapview)
library(ggplot2)
library(cowplot)
library(raster)
library(tmap)
library(leaflet)
library(stars)
library(remotes)
remotes::install_github('r-tmap/tmap')
#  Carga de base de datos ####
datos <- st_read("soja_depurado.gpkg")
head(datos)
# limites (bordes) del lote ####
limites <- concaveman::concaveman(datos, concavity = 10)
plot(limites)
limites2 <- concaveman::concaveman(datos, concavity =1 )
plot(limites2)
######################################################3
# este es para cuando existe algun tipo de tedencia
#  Kriging Universal ####
head(datos)
datos <- cbind(datos, st_coordinates(datos)) %>%
dplyr::rename("x" = X, "y" = Y)
